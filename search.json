[
  {
    "objectID": "common/references.html",
    "href": "common/references.html",
    "title": "References",
    "section": "",
    "text": "All sources used during the compilation of this guidance are referenced below.\n\n\n[1] Open Source Initiative, “The open source definition.” https://opensource.org/osd/\n\n\n[2] Office for National Statistics, “Quality assurance of code for analysis and research.” https://best-practice-and-impact.github.io/qa-of-code-guidance/intro.html/\n\n\n[3] HM Treasury, “The aqua book.” https://www.gov.uk/government/publications/the-aqua-book-guidance-on-producing-quality-analysis-for-government\n\n\n[4] NHS Digital, “How to publish your code in the open.” https://nhsdigital.github.io/rap-community-of-practice/implementing_RAP/how-to-publish-your-code-in-the-open/\n\n\n[5] NHS Digital, “NHS fit for publishing checklist word document.” https://nhsdigital.github.io/rap-community-of-practice/images/Fit_for_publishing_checklist.docx\n\n\n[6] Government Digital Services, “The benefits of coding in the open.” https://gds.blog.gov.uk/2017/09/04/the-benefits-of-coding-in-the-open/\n\n\n[7] Government Digital Services, “Why we code in the open (YouTube video).” https://www.youtube.com/watch?v=aqFFCvjXr1s\n\n\n[8] Central Digial and Data Office, “Be open and use open source.” https://www.gov.uk/guidance/be-open-and-use-open-source\n\n\n[9] Central Digial and Data Office, “The technology code of practice.” https://www.gov.uk/guidance/be-open-and-use-open-source\n\n\n[10] Ministry of Justice, “Why we code in the open.” https://mojdigital.blog.gov.uk/2017/02/21/why-we-code-in-the-open/\n\n\n[11] UK Statistics Authority, “Code of practice for statistics.” https://code.statisticsauthority.gov.uk/\n\n\n[12] Central Digial and Data Office, “When code shoulde be open or closed.” https://www.gov.uk/government/publications/open-source-guidance/when-code-should-be-open-or-closed\n\n\n[13] Analytical Standards and Pipelines team at the Office for National Statistics (ONS), “Open sourcing analytical code.” https://analysisfunction.civilservice.gov.uk/policy-store/open-sourcing-analytical-code/\n\n\n[14] I. C. Office, “Information commissioners office guidance on freedom of information requests.” https://ico.org.uk/for-organisations/guide-to-freedom-of-information/\n\n\n[15] Office for National Statistics Best Practice & Impact, “Govcookiecutter on GitHub.” https://github.com/best-practice-and-impact/govcookiecutter\n\n\n[16] Office for National Statistics Data Science Campus, “Data science campus GitHub training.” https://github.com/datasciencecampus/DSCA_GitHub_Training"
  },
  {
    "objectID": "common/general_considerations.html",
    "href": "common/general_considerations.html",
    "title": "General Considerations",
    "section": "",
    "text": "Points to consider (not necessarily in this order):\n\nDo you intend to publish with/without the commit history? Potentially a much larger job to undertake with a full commit history. If sharing the full commit history is justified, it may be more appropriate to consider an “open from the start” approach where active development is done in the open. Otherwise, a full readthrough of every commit diff checking for risks and vulnerabilities in the code is required.\nRepository tagging/labelling\nKey and Credential Management\nPublishing with intention for further development and/or on-going maintenance:\n\ncontribution guidance (issues/PR templates)\nsemantic versioning\nchange log\n\nFollowing coding good practices:\n\nrecommend ONS code quality assurance [1] as it will cover styles, functional code, unit testing, version control, minimising disclosure risks: repo structure (but still point to our own), pre-commit, gitignore.\n\nRepo structure. Consider appropriate structure. Select from campus templates or govcookiecutter [2] or similar.\nDocumentation (readmes, and more?)\nLicenses. General guidance is to use MiT for code and OGL for docs and data (as appropriate).\nUse open source tools/software/data\nDummy data. If you cannot release the data required to run your code, can you release summy data to help users execute scripts? This data may be released as test fixtures.\nNotebooks or not to notebooks… (what about gists? maybe part of documentation)\nSkill-sets/training - are your team operating with an acceptable understanding of what the risks associated with your work are? Steps to help the development team share in best practice should be considered, such as:\n\nEnsuring the Data Science Campus (DSC) GitHub SyOps has been completed for all members.\nThe DSC GitHub training [3] has been completed and refreshed as needed.\npair programming to support junior developers.\n\n\n\n\n\n\nReferences\n\n[1] Office for National Statistics, “Quality assurance of code for analysis and research.” https://best-practice-and-impact.github.io/qa-of-code-guidance/intro.html/\n\n\n[2] Office for National Statistics Best Practice & Impact, “Govcookiecutter on GitHub.” https://github.com/best-practice-and-impact/govcookiecutter\n\n\n[3] Office for National Statistics Data Science Campus, “Data science campus GitHub training.” https://github.com/datasciencecampus/DSCA_GitHub_Training"
  },
  {
    "objectID": "www-ebi/resolving-problems.html",
    "href": "www-ebi/resolving-problems.html",
    "title": "What could go wrong?",
    "section": "",
    "text": "This page is for us to help raise awareness in issues that could be encountered while preparing to release for code. Let’s help each other to avoid common problems prior to publishing:"
  },
  {
    "objectID": "www-ebi/resolving-problems.html#documentation",
    "href": "www-ebi/resolving-problems.html#documentation",
    "title": "What could go wrong?",
    "section": "Documentation",
    "text": "Documentation\nHave you:\n\nchecked that all the links work in your README?\n\nincluded some helpful code status description, ie maintained, ad hoc analysis etc?\n\nfully attributed the work of others? Including a LICENSE.note file where appropriate?\n\nspecified which operating system the code is compatible with?"
  },
  {
    "objectID": "www-ebi/resolving-problems.html#source-code",
    "href": "www-ebi/resolving-problems.html#source-code",
    "title": "What could go wrong?",
    "section": "Source Code",
    "text": "Source Code\nHave you:\n\nchecked that the code runs in a fresh clone of the repo and in a new environment?\n\nbeen able to pip install -r requirements.txt without any trouble?"
  },
  {
    "objectID": "www-ebi/resolving-problems.html#notebooks",
    "href": "www-ebi/resolving-problems.html#notebooks",
    "title": "What could go wrong?",
    "section": "Notebooks",
    "text": "Notebooks"
  },
  {
    "objectID": "www-ebi/resolving-problems.html#tests",
    "href": "www-ebi/resolving-problems.html#tests",
    "title": "What could go wrong?",
    "section": "Tests",
    "text": "Tests"
  },
  {
    "objectID": "open-development/open-at-start.html",
    "href": "open-development/open-at-start.html",
    "title": "Open at the start",
    "section": "",
    "text": "Note\n\n\n\nPlaceholder page"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Coding in the Open",
    "section": "",
    "text": "The following pages aim to provide guidance on ‘coding in the open’ - that is developing open-source codebases or transitioning codebases from private to public domains. The term open-source captures work that is made freely available for others to use and modify [1].\nThis guide does not replace the need for good project governance. Nor does it replace any of the guidance presented in UK Government’s Aqua Book [2]. The purpose of this guide is to supplement the information in the Aqua book with considerations related specifically to publishing analytical code on GitHub.\nThis guidance is split into 3 main pages:\nThese pages are accessible via the sidebar and are linked in Table 1 above. Each page has a table of contents on the right hand side linking the sections available within them. It is also possible to report any issues or errors with the page using the link provided in the table of contents.\nAll sources used when compiling this guidance are referenced throughout (you can hover over them for more details). Additionally, they are available at the bottom of each page and in a dedicated references page for convenience. To go straight to the NHS Digital guidance with the fit for publishing checklist [3]."
  },
  {
    "objectID": "index.html#sec-who-for",
    "href": "index.html#sec-who-for",
    "title": "Coding in the Open",
    "section": "Who is this Guidance For?",
    "text": "Who is this Guidance For?\nThis guidance was originally assembled to support open-source code development within the ONS Data Science Campus. However, it could ultimately be used by anyone who has an interest or need in developing open-source code or would like to transition a codebase from a private/closed domain into the open."
  },
  {
    "objectID": "index.html#sec-intentions",
    "href": "index.html#sec-intentions",
    "title": "Coding in the Open",
    "section": "What are the Guidance Intentions?",
    "text": "What are the Guidance Intentions?\nThe goals of this guidance are to support development strategies for projects that can be:\n\n\n\nOpen at the start. This implies that from the beginning all code/software developed would be available for anyone to view and use.\nOpen at the end. Encourages and supports, where possible, closed/private codebases to transition into the public domain.\nNever open. Recognises there maybe scenarios where valid arguments prevent publishing a codebase in the open, but developing privately is the exception rather than the rule.\n\n\n\nThis guidance aims to achieve these goals by:\n\n\n\nProviding a set of considerations when developing an open-source codebase or moving a codebase from a private into a public repository.\nNot being a prescriptive “one size fits all” process, but adaptable guidance that can be modified as required based on the size, complexity and purpose of the work.\nAdding quality to public codebases and to help mitigate potential risks when working in or moving into the public domain.\nImproving transparency of decision making, as to why codebases are open/closed.\nClosing a current resource gap, where at the time of writing no internal guidance exists."
  },
  {
    "objectID": "index.html#sec-why-open",
    "href": "index.html#sec-why-open",
    "title": "Coding in the Open",
    "section": "Why Develop in the Open?",
    "text": "Why Develop in the Open?\nThe Office for National Statistics (ONS) quality assurance of code [4], the Government Analysis Function [5], and the UK Government’s Technology Code of Practice [6] all call for code to be open-source. This is, at least in part, due to the wide range of benefits that developing in the open brings. In particular, these benefits help support an outputs’ compliance with the UKSA Code of practice for Statistics [7] - where public value, high quality, and trustworthiness are the main pillars.\nThere are many sources which explain these benefits in detail [3]–[6], [8]–[11], and they all argue strongly as to why this guidance advocates for open source development. The themed boxes below summarise the benefits of open-source software and coding in the open:\n\n\n\nIncreases Quality\nThere is a heightened inclination to apply coding standards and best practice when knowing the work will be viewed and used by a larger audience.\n\n\n\n\nIncreases Collaboration\nSimplifies the process of sharing work, which in turn improves knowledge-sharing and provides an opportunity for additional development support. Our work will benefit from collaboration with other government departments, academic institutions & the wider open-source community.\n\n\n\n\n\n\nIncreases Transparency\nPotential users and interested parties can see, understand, and reproduce work. This helps build trust in the work being undertaken and shared.\n\n\n\n\nSupports Whole Community\nOthers can benefit from work already developed by facilitating code re-use.\n\n\n\n\n\n\nPublic Investment\n“Public services are built with public money”, which provides good ground to make code publically available unless there is a good reason not to publish the codebase. In not releasing code where appropriate to do so, you may be unintentionally tolerating the risk of needing to turn around potenital freedom of information requests within the 20 working day time period. [12]"
  },
  {
    "objectID": "index.html#sec-why-closed",
    "href": "index.html#sec-why-closed",
    "title": "Coding in the Open",
    "section": "Why Develop Privately?",
    "text": "Why Develop Privately?\nOpen-source development does bring with it some additional considerations and risks [5]. As a result, there are scenarios in which opening all or parts of a codebase may not be possible [13]. The themed boxes below summarise reasons why all or part of a codebase may not be publicly available:\n\n\n\nSensitivity\nThe codebase may relate to or share sensitive information e.g., a policy that has not yet been announced, or data that has not yet been released.\n\n\n\n\nStatistical Disclosure\nThe codebase may, inadvertently or otherwise, share identifiable information about individuals or organisations.\n\n\n\n\n\n\nKeys and Credentials\nThe codebase may contain keys and/or credentials that need to be secured e.g., keys/credentials to utilise an API.\n\n\n\n\nSkills and Expertise\nThe skill-set, experience and/or confidence to work openly and manage the associated risks may not be present across all team members.\n\n\n\n\n\n\nLicence Agreements\nThe codebase may use proprietary (closed-source) software or could be considered proprietary itself. In these cases, opening the codebase could breach licence terms and/or user agreement. It could also lead to end users being dependent on the use of (potentially expensive) proprietary software, ultimately meaning the released codebase is not accessible to everyone."
  },
  {
    "objectID": "index.html#sec-open-v-closed",
    "href": "index.html#sec-open-v-closed",
    "title": "Coding in the Open",
    "section": "Coding Openly (the premise) or Privately (the exception)?",
    "text": "Coding Openly (the premise) or Privately (the exception)?\nOpen-sourcing a codebase is a case-by-case balance between its purpose, public value, risk management and technical constraints [5]. As outlined in the sections above, code should be made open to maximise the benefits for the codebase itself and the wider community unless an explicit justification exists to prevent it being open.\nThe premise therefore should be one where the codebase is open by default - that is, all code/software developed would be available for anyone to view and use from the beginning. This stance brings the benefits of open-source development upfront and minimises any additional workload that would come from transitioning the codebase from private to public at a later date.\nIf it is not possible to be open by default, consider other strategies for making the codebase open. These approaches could bring additional design complexity and/or workload when compared with being open by default, but ultimately the codebase would still benefit from the same open-source advantages. This could be:\n\n\n\nDesigning or re-designing the codebase to use open-source dependencies.\nSeparating out or removing sections that should not be made public.\nConsistently using good coding practices [4], to simplify the process of opening the codebase in the future should it be possible.\nTransitioning a private codebase to public at a later date (see specific guidance on this topic).\nMaintain private and public versions of a codebase - development could then continue in a private domain and then be released publicly as needed.\nReleasing code with synthetic or dummy data, such as that used when testing your codebase.\n\n\n\nFinally, if it is not possible for the codebase to be made public, an evidence-based justification should be made as to why this is the case. It is envisaged that this case would be the exception rather than the rule."
  },
  {
    "objectID": "private/private-development.html",
    "href": "private/private-development.html",
    "title": "Never open",
    "section": "",
    "text": "Note\n\n\n\nPlaceholder page"
  },
  {
    "objectID": "private_to_public/risk-table.html",
    "href": "private_to_public/risk-table.html",
    "title": "Risk Assessment Table Example Format",
    "section": "",
    "text": "Risk\nConsequences\nImpact\nLikelihood\nExposure\nRisk\nMitigations\nImpact\nLikelihood\nExposure\nRisk\n\n\n\n\nDescription of risk\nWhat could go wrong\nImpact score\nLikelihood Score\nLikelihood x Impact\nRisk assessment (high/medium/low)\nA list of things you could do to reduce the risk\nRevised impact score\nRevised likelihood score\nRevised exposure\nRevised risk"
  },
  {
    "objectID": "private_to_public/guidance.html",
    "href": "private_to_public/guidance.html",
    "title": "Open at the end",
    "section": "",
    "text": "Transitioning from a private to a public repository is slightly more complicated than coding in the open from the beginning. However that shouldn’t stop you from exploring the option, because there are a whole host of benefits to open sourcing your code.\nThis guide will help you decide whether moving from private to public is right for your repository, and help you walk through the required steps to do it.\nA helpful process diagram summarises the approach.\n\n\n\nThe hardest bit is building up the courage to start. The challenge for any code owner is to weigh up the pro’s and con’s of making their repository open. We’ve gone through this process a few times now, so we can take you through the questions we asked ourselves, to help us decide.\n\nWhat is the worst thing that could happen if someone found a big mistake in your code?\nIs that worse than you never finding that mistake and getting something wrong forever?\nWould your users find it helpful if you published links to your code in your publications?\nHow much work is required to get it to a fit state? (see our fit for publishing checklist)\n\nYour repo doesn’t have to be a glowing example of best practice to be made public. For example, if you are working on something experimental and you’re not sure whether you want to invest extra time in adding on all the bells and whistles. Let’s be honest, we rarely have time for perfect. Striving for fully documented code and test coverage, shouldn’t be be a blocker for sharing your good work.\nThat’s not to say you shouldn’t bother with unit tests or documentation at all. Sorry :( .\nThere is a good reason these are considered best practice. Well documented code makes it easier for you and your collaborators to understand what parts of your code are doing, lowering the burden for collaboration.\nUnit tests make it easier for you as a code owner to implement changes and accept contributions from other people. Why? Because if you have good test coverage, you can quickly see if someone else’s cool new feature breaks the rest of your pre-existing code. Without these, there is a larger overhead to accepting contributions, because you will want to run tests yourself manually to check this or risk errors popping up when you really don’t want them.\n\n\n\nSo you’ve decided to go ahead with publishing your code, that’s great!\nIt’s probably a good idea at this point to write down all of the potential things that could go wrong, and how you plan to reduce the likelihood or impact of those things.\nIf you’ve never written a risk assessment before, not to worry it’s super easy. I’ve provided a quick template below.\nAn appropriate table format for a risk log can be found here.\nAlong with this risk exposure diagram to help you assess the impact, likelihood and exposure scores\n\n\n\nRisk Exposure Matrix\n\n\nImportant things to consider in your risk assessment - follow the reference link to a helpful NHS checklist template [1]:\n\nHow will you ensure no passwords, data or other sensitive information is shared by making your repo public?\nHow will you safeguard against people accidentally pushing this information in the future after the repo is made public?\nHow will you manage users expectations of quality and on-going maintenance?\nHow will you use licencing to protect any proprietary rights and set limitations on liability from others using your code?\n\n\n\n\nIt’s time to implement your mitigations and get those risk scores down. Hopefully it’s just a few small changes or additions you need to make to your code, but equally you might decide at this point that you need some more time to make the changes required to mitigate the risks.\nThere is no rush. So take your time, ask questions, and make sure you get it right.\n\n\n\nWe recommend that someone not connected with the repository reviews the work. Specifically, looking to check to see if they can install and/or run your code from the instructions, and looking out for any sensitive information or vulnerabilities. The external review should be a colleague with the appropriate experience in what risks to look for and should not have been involved in the development work. The external review can happen concurrently with the development team’s review of the codebase or following its conclusion (see previous steps).\nOnce the risks identified by the review have completed, the updated checklist [1] should be provided to the project lead for review. You might need to explain some of the things on there, but the idea is that you are giving others an opportunity to challenge, because risk assessments are subjective and there may be things you haven’t thought of.\n\n\n\nAsk your code reviewer to send you written confirmation of their findings, and forward that along with your risk assessment and summary of what you’ve done to mitigate any risks to the project lead.\nThe project lead will then be able to make a decision as to whether the code is fit for publishing or requires further work in order to meet the necessary standard for release.\n\n\n\nThis checklist summarises additional considerations when working with the NHS checklist [1].\n\nAre there clearly documented instructions on how to install, run and contribute to the repository?\nCheck that the code runs within a fresh clone with a new environment.\nCheck for broken links in the docs.\nAre you confident that there are no credentials, secrets, or sensitive data in the repository (including the commit history if in scope for publication)?\nAre you satisfied that the residual risk is within your organisations tolerance?"
  },
  {
    "objectID": "private_to_public/guidance.html#a-process",
    "href": "private_to_public/guidance.html#a-process",
    "title": "Open at the end",
    "section": "",
    "text": "Transitioning from a private to a public repository is slightly more complicated than coding in the open from the beginning. However that shouldn’t stop you from exploring the option, because there are a whole host of benefits to open sourcing your code.\nThis guide will help you decide whether moving from private to public is right for your repository, and help you walk through the required steps to do it.\nA helpful process diagram summarises the approach.\n\n\n\nThe hardest bit is building up the courage to start. The challenge for any code owner is to weigh up the pro’s and con’s of making their repository open. We’ve gone through this process a few times now, so we can take you through the questions we asked ourselves, to help us decide.\n\nWhat is the worst thing that could happen if someone found a big mistake in your code?\nIs that worse than you never finding that mistake and getting something wrong forever?\nWould your users find it helpful if you published links to your code in your publications?\nHow much work is required to get it to a fit state? (see our fit for publishing checklist)\n\nYour repo doesn’t have to be a glowing example of best practice to be made public. For example, if you are working on something experimental and you’re not sure whether you want to invest extra time in adding on all the bells and whistles. Let’s be honest, we rarely have time for perfect. Striving for fully documented code and test coverage, shouldn’t be be a blocker for sharing your good work.\nThat’s not to say you shouldn’t bother with unit tests or documentation at all. Sorry :( .\nThere is a good reason these are considered best practice. Well documented code makes it easier for you and your collaborators to understand what parts of your code are doing, lowering the burden for collaboration.\nUnit tests make it easier for you as a code owner to implement changes and accept contributions from other people. Why? Because if you have good test coverage, you can quickly see if someone else’s cool new feature breaks the rest of your pre-existing code. Without these, there is a larger overhead to accepting contributions, because you will want to run tests yourself manually to check this or risk errors popping up when you really don’t want them.\n\n\n\nSo you’ve decided to go ahead with publishing your code, that’s great!\nIt’s probably a good idea at this point to write down all of the potential things that could go wrong, and how you plan to reduce the likelihood or impact of those things.\nIf you’ve never written a risk assessment before, not to worry it’s super easy. I’ve provided a quick template below.\nAn appropriate table format for a risk log can be found here.\nAlong with this risk exposure diagram to help you assess the impact, likelihood and exposure scores\n\n\n\nRisk Exposure Matrix\n\n\nImportant things to consider in your risk assessment - follow the reference link to a helpful NHS checklist template [1]:\n\nHow will you ensure no passwords, data or other sensitive information is shared by making your repo public?\nHow will you safeguard against people accidentally pushing this information in the future after the repo is made public?\nHow will you manage users expectations of quality and on-going maintenance?\nHow will you use licencing to protect any proprietary rights and set limitations on liability from others using your code?\n\n\n\n\nIt’s time to implement your mitigations and get those risk scores down. Hopefully it’s just a few small changes or additions you need to make to your code, but equally you might decide at this point that you need some more time to make the changes required to mitigate the risks.\nThere is no rush. So take your time, ask questions, and make sure you get it right.\n\n\n\nWe recommend that someone not connected with the repository reviews the work. Specifically, looking to check to see if they can install and/or run your code from the instructions, and looking out for any sensitive information or vulnerabilities. The external review should be a colleague with the appropriate experience in what risks to look for and should not have been involved in the development work. The external review can happen concurrently with the development team’s review of the codebase or following its conclusion (see previous steps).\nOnce the risks identified by the review have completed, the updated checklist [1] should be provided to the project lead for review. You might need to explain some of the things on there, but the idea is that you are giving others an opportunity to challenge, because risk assessments are subjective and there may be things you haven’t thought of.\n\n\n\nAsk your code reviewer to send you written confirmation of their findings, and forward that along with your risk assessment and summary of what you’ve done to mitigate any risks to the project lead.\nThe project lead will then be able to make a decision as to whether the code is fit for publishing or requires further work in order to meet the necessary standard for release.\n\n\n\nThis checklist summarises additional considerations when working with the NHS checklist [1].\n\nAre there clearly documented instructions on how to install, run and contribute to the repository?\nCheck that the code runs within a fresh clone with a new environment.\nCheck for broken links in the docs.\nAre you confident that there are no credentials, secrets, or sensitive data in the repository (including the commit history if in scope for publication)?\nAre you satisfied that the residual risk is within your organisations tolerance?"
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "Contributions",
    "section": "",
    "text": "It’s important that the content of each section is in the correct place. The aim of the current structure is to provide lighweight documentation and to place detailed guidance in dedicated subpages. Please review your contibution against the purposes of each page:\n\nindex.qmd: Help the user navigate the website structure.\ngeneral-considerations/guidance.qmd : Things that apply to any approach to code publication (open at start, end or never open). Things to think about prior to making this decision.\ngeneral-considerations/references.qmd : Please do not add references here. Instead, add references to bibliography/references.bib and reference using the @ notation.\nopen-at-the-start/guidance.qmd : Considerations for projects that will develop in the open.\nopen-at-the-end/guidance.qmd : Considerations for projects that will publish at close or at intervals. This may be with a full or partial commit history.\nnever-open/guidance.qmd : Things to consider if a project is too sensitive to consider publishing.\nwhat-could-go-wrong/checklist.qmd : A page to help us learn from each other. Things that may not have been caught by the ’fit for publishing’checklist or are more specific to certain kinds of projects (eg webscraping activities).\n\n\n\n\nPlease help us meet Government Digital Standard by:\n[ ] render your documentation and check with the WAVE accessibility browser plugin. [ ] avoiding the use of italic or strikethrough text. [ ] ensuring all images have descriptive alt text. [ ] only using image tags as markdown syntax renderring cannot be relied upon to present alt text as required by WCAG guidance. Avoid using markdown to render images. [ ] avoid skipping headers for visual purposes. Header orders should be incremental, such as h1,h2,h3,h2,h2,h2,h3,h4,h4 etc. Headers can be restyled using CSS where required."
  },
  {
    "objectID": "CONTRIBUTING.html#a-guide-to-contributing-to-the-process-guidance",
    "href": "CONTRIBUTING.html#a-guide-to-contributing-to-the-process-guidance",
    "title": "Contributions",
    "section": "",
    "text": "It’s important that the content of each section is in the correct place. The aim of the current structure is to provide lighweight documentation and to place detailed guidance in dedicated subpages. Please review your contibution against the purposes of each page:\n\nindex.qmd: Help the user navigate the website structure.\ngeneral-considerations/guidance.qmd : Things that apply to any approach to code publication (open at start, end or never open). Things to think about prior to making this decision.\ngeneral-considerations/references.qmd : Please do not add references here. Instead, add references to bibliography/references.bib and reference using the @ notation.\nopen-at-the-start/guidance.qmd : Considerations for projects that will develop in the open.\nopen-at-the-end/guidance.qmd : Considerations for projects that will publish at close or at intervals. This may be with a full or partial commit history.\nnever-open/guidance.qmd : Things to consider if a project is too sensitive to consider publishing.\nwhat-could-go-wrong/checklist.qmd : A page to help us learn from each other. Things that may not have been caught by the ’fit for publishing’checklist or are more specific to certain kinds of projects (eg webscraping activities).\n\n\n\n\nPlease help us meet Government Digital Standard by:\n[ ] render your documentation and check with the WAVE accessibility browser plugin. [ ] avoiding the use of italic or strikethrough text. [ ] ensuring all images have descriptive alt text. [ ] only using image tags as markdown syntax renderring cannot be relied upon to present alt text as required by WCAG guidance. Avoid using markdown to render images. [ ] avoid skipping headers for visual purposes. Header orders should be incremental, such as h1,h2,h3,h2,h2,h2,h3,h4,h4 etc. Headers can be restyled using CSS where required."
  }
]