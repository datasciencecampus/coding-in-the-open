---
title: "Which Development Strategy is Right for a Project?"
description: "A recipe for assessing a project for open sourcing a project."
date: last-modified
categories:        
    - How-To
toc: true
toc-depth: 2
---

## Problem

There is a project, it could be already underway or in the initial planning
stage. A codebase may already exist, or it could be about to. You have read the
guidance and need a checklist to help you assess which of the 3 development
strategies are appropriate:
* Open at the start
* Open at the end
* Never open

## What you will need

* Knowledge of the project context and its current status.
* An understanding of capability in the development team.
* Access to project governance, including the outcome of the ethical review.

## Review the Project

Throughout this section, toggle between the context that best suits the status
of the project - "planning" or "underway".

::: panel-tabset
### Planning

The project has been commissioned and work is underway. An ethical evaluation
@selfAssess has or will be submitted to the Centre for Applied Data Ethics for
assessment. Code has not yet been written. The development team has been
identified.

### Underway

The project has moved past initiation and code has been written. This likely
exists in a private repository but you need to check the assumption that close
sourced development is appropriate.

:::

### Sensitivity

Assess the project against the CDDO grounds for not releasing code:
@CDDOClosed

1. Does the code contain keys or credentials?
2. Does the code contain algorithms used to detect fraud?
3. Does the code make apparent unreleased policy?

::: panel-tabset
### Planning

In the case of point 1, practices documented in ONS Duck Book @DuckBook should
be used to avoid the exposure of sensitive credentials or personally
identifiable information.

### Underway

If credentials or personally identificable information are committed to the
version history, the simplest path to publication is to ensure these credentials
are removed in the latest commit and publish only that version of the project.
Ensure that this decision is disseminated throughout the project and delivery
team, recording the decision and reasons in the project governance.  

:::

In determining whether the project is likely to expose unreleased policy,
involve internal and external stakeholders in this decision. 

### Version History

Do you intend to publish the full commit history? 

::: panel-tabset
### Planning

* Consider an "open from the start" approach where active development is done
in the open. Review with the development team that they are comfortable with
the approach and know how to mitigate risk when developing in the open.
* If not open at the start, be aware that publishing the codebase at intervals
may introduce delay to peer review. Build this into your project delivery plan. 

### Underway

* A full review of every commit, checking for risks and vulnerabilities, is
required. This may be burdensome and is discouraged without a clear benefit.
* Publication of the most recent version may be more feasible. Once
achieved, consider whether to continue programming in the open or to pursue a
strategy of periodic public release.
:::

### The Code Repository

Ensuring that a repository contains all the expected metadata ensures that we
help the open source community understand:

1. what the work is about
2. what is the status of the codebase
3. how the code and / or data can be re-used
4. what the expectations for collaboration are

Whether the project is at planning stage or is already underway, ensure the
repository contains the following information:


#### Required

* Repo structure. Consider appropriate structure. Consider using Campus
templates or govcookiecutter @GovCookieCutter.
* Ensure the documentation is up-to-date and correct.
* Licenses. General guidance is to use MiT @MIT for code and Open Government
License @ogl3 for docs and data.

#### Optional

* Contribution guidance (issues/PR templates)
* Repository tagging / labelling, eg in development, archived etc. 
* Semantic versioning
* Change log

### Code Quality

- Following coding good practices:
    - recommend ONS code quality assurance @DuckBook as it will cover styles, functional code, unit testing, version control, minimising disclosure risks: repo structure (but still point to our own), pre-commit, gitignore.

### Risks

- PII
- Key and Credential Management
- Dummy data. If you cannot release the data required to run your code, can you release summy data to help users execute scripts? This data may be released as test fixtures.
- Notebooks or not to notebooks... (what about gists? maybe part of documentation)\- Skill-sets/training - are your team operating with an acceptable understanding of what the risks associated with your work are? Steps to help the development team share in best practice should be considered, such as:
    - Ensuring the Data Science Campus (DSC) GitHub SyOps has been completed for all members.
    - The DSC GitHub training @DSCGitHubTraining has been completed and refreshed as needed.
    - pair programming to support junior developers.
