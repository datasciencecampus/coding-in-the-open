[
  {
    "objectID": "overview/references.html",
    "href": "overview/references.html",
    "title": "References",
    "section": "",
    "text": "All sources used during the compilation of this guidance are referenced below.\n\n\n[1] The Open Source Initiative, “The MiT license.” https://opensource.org/license/mit/\n\n\n[2] Information Commissioners Office, “Information Commissioners Office guidance for Organisations.” https://ico.org.uk/for-organisations/\n\n\n[3] David Clark, Cabinet Office, “Your right to know, freedom of information whitepaper.” https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/272048/3818.pdf\n\n\n[4] The Office of the Parliamentary Counsel, “Freedom of information act 2000, part II.” https://www.legislation.gov.uk/ukpga/2000/36/part/II\n\n\n[5] The Office of the Parliamentary Counsel, “Freedom of information act 2000.” https://www.legislation.gov.uk/ukpga/2000/36/contents\n\n\n[6] T. G. Project, “Git tools - searching.” https://git-scm.com/book/en/v2/Git-Tools-Searching\n\n\n[7] Florian Rathgeber, “Nbstripout.” https://github.com/kynan/nbstripout\n\n\n[8] Aaron Loo, “Detect-secrets.” https://github.com/Yelp/detect-secrets\n\n\n[9] Open Source Initiative, “The open source definition.” https://opensource.org/osd/\n\n\n[10] Office for National Statistics, “Duck book peer review checklists.” https://best-practice-and-impact.github.io/qa-of-code-guidance/checklists.html\n\n\n[11] Office for National Statistics, “Quality assurance of code for analysis and research.” https://best-practice-and-impact.github.io/qa-of-code-guidance/intro.html\n\n\n[12] HM Treasury, “The aqua book.” https://www.gov.uk/government/publications/the-aqua-book-guidance-on-producing-quality-analysis-for-government\n\n\n[13] NHS Digital, “How to publish your code in the open.” https://nhsdigital.github.io/rap-community-of-practice/implementing_RAP/how-to-publish-your-code-in-the-open/\n\n\n[14] NHS Digital, “NHS fit for publishing checklist word document.” https://nhsdigital.github.io/rap-community-of-practice/images/Fit_for_publishing_checklist.docx\n\n\n[15] Government Digital Services, “The benefits of coding in the open.” https://gds.blog.gov.uk/2017/09/04/the-benefits-of-coding-in-the-open/\n\n\n[16] Government Digital Services, “Why we code in the open (YouTube video).” https://www.youtube.com/watch?v=aqFFCvjXr1s\n\n\n[17] Central Digital and Data Office, “Be open and use open source.” https://www.gov.uk/guidance/be-open-and-use-open-source\n\n\n[18] Central Digital and Data Office, “The technology code of practice.” https://www.gov.uk/guidance/the-technology-code-of-practice\n\n\n[19] Ministry of Justice, “Why we code in the open.” https://mojdigital.blog.gov.uk/2017/02/21/why-we-code-in-the-open/\n\n\n[20] UK Statistics Authority, “Code of practice for statistics.” https://code.statisticsauthority.gov.uk/\n\n\n[21] Central Digital and Data Office, “When code should be open or closed.” https://www.gov.uk/government/publications/open-source-guidance/when-code-should-be-open-or-closed\n\n\n[22] Analytical Standards and Pipelines team at the Office for National Statistics (ONS), “Open sourcing analytical code.” https://analysisfunction.civilservice.gov.uk/policy-store/open-sourcing-analytical-code/\n\n\n[23] Information Commissioners Office, “Information Commissioners Office Guidance on Freedom of Information Requests.” https://ico.org.uk/for-organisations/guide-to-freedom-of-information/\n\n\n[24] Office for National Statistics Best Practice & Impact, “Govcookiecutter on GitHub.” https://github.com/best-practice-and-impact/govcookiecutter\n\n\n[25] Office for National Statistics Data Science Campus, “Data science campus GitHub training.” https://github.com/datasciencecampus/DSCA_GitHub_Training\n\n\n[26] Information Commissioners Office, “How to access information from a public authority.” https://ico.org.uk/for-the-public/official-information/\n\n\n[27] U. S. Authority, “Centre for applied data ethics.” https://uksa.statisticsauthority.gov.uk/what-we-do/data-ethics/centre-for-applied-data-ethics/\n\n\n[28] UK Statistics Authority Data Ethics Advisory Committee, “Ethics self-assessment tool.” https://uksa.statisticsauthority.gov.uk/the-authority-board/committees/national-statisticians-advisory-committees-and-panels/national-statisticians-data-ethics-advisory-committee/ethics-self-assessment-tool/\n\n\n[29] A. Sottile et al, “Pre-commit.” https://pre-commit.com/\n\n\n[30] Tim Green, “Minimal template.” https://github.com/datasciencecampus/project-repo-template\n\n\n[31] GitHub, “GitHub branch protection.” https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches\n\n\n[32] The National Archives, “Open government license 3.0.” https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/\n\n\n[33] Civil Service, “Civil service standard.” https://www.gov.uk/government/publications/civil-service-code\n\n\n[34] GitHub, “GitHub projects beta.” https://docs.github.com/en/enterprise-server@3.8/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects\n\n\n[35] GitHub, “Managing the visibility of a project.” https://docs.github.com/en/issues/planning-and-tracking-with-projects/managing-your-project/managing-visibility-of-your-projects",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "overview/which-development-strategy.html",
    "href": "overview/which-development-strategy.html",
    "title": "Which Development Strategy is Right for a Project?",
    "section": "",
    "text": "The intention of this advice is to help and not to remove agency or reduce responsibility in any given instance of where this guidance may be applied. The specifics of any project can be expected to offer cause to defer from this guidance. Colleagues are expected to use their professional judgement in deciding which checks are appropriate for their application."
  },
  {
    "objectID": "overview/which-development-strategy.html#foreword",
    "href": "overview/which-development-strategy.html#foreword",
    "title": "Which Development Strategy is Right for a Project?",
    "section": "",
    "text": "The intention of this advice is to help and not to remove agency or reduce responsibility in any given instance of where this guidance may be applied. The specifics of any project can be expected to offer cause to defer from this guidance. Colleagues are expected to use their professional judgement in deciding which checks are appropriate for their application."
  },
  {
    "objectID": "overview/which-development-strategy.html#problem",
    "href": "overview/which-development-strategy.html#problem",
    "title": "Which Development Strategy is Right for a Project?",
    "section": "Problem",
    "text": "Problem\nThere is a project, it could be already underway or in the initial planning stage. A codebase may already exist, or it could be about to. You have read the guidance available in this site and need a checklist to help you assess whether the project is suitable for publication."
  },
  {
    "objectID": "overview/which-development-strategy.html#requirements",
    "href": "overview/which-development-strategy.html#requirements",
    "title": "Which Development Strategy is Right for a Project?",
    "section": "Requirements",
    "text": "Requirements\n\nKnowledge of the project context and its current status.\nAn understanding of capability in the project’s development team.\nAccess to project governance, including the outcome of the ethical review."
  },
  {
    "objectID": "overview/which-development-strategy.html#review-the-project",
    "href": "overview/which-development-strategy.html#review-the-project",
    "title": "Which Development Strategy is Right for a Project?",
    "section": "Review the Project",
    "text": "Review the Project\nThroughout this section, toggle between the context that best suits the status of the project - “planning” or “underway”.\n\nPlanningUnderway\n\n\nThe project has been commissioned and work is underway. An ethical evaluation [1] has or will be submitted to the Centre for Applied Data Ethics [2] for assessment. Code has not yet been written. The development team has been identified.\n\n\nThe project has moved past initiation and code has been written. This likely exists in a private repository but you need to check the assumption that close sourced development is appropriate.\n\n\n\n\n1. Domain Sensitivity\nAssess the project against the CDDO grounds for not releasing code: [3]\n\nDoes the code contain keys or credentials?\nDoes the code contain algorithms used to detect fraud?\nDoes the code make unreleased policy apparent?\n\n\nPlanningUnderway\n\n\nIn the case of point 1, practices documented in ONS Duck Book [4] should be used to avoid the exposure of sensitive credentials or personally identifiable information.\n\n\nIf credentials or personally identifiable information are committed to the version history, the simplest path to publication is to ensure these credentials are removed in the latest commit and publish only that single commit. Ensure that this decision is disseminated throughout the project and delivery team, recording the decision and reasons in the project governance.\n\n\n\nIn determining whether the project is likely to expose unreleased policy, involve internal and external stakeholders in this decision.\nA project that is not suitable for publication should be clearly identified in the governance documentation from the outset. If this is the case, be aware that much of the best-practice guidance documented here should still be applied to private codebases.\n\n\n2. Project Risks\n\nPlanningUnderway\n\n\n\nIf the codebase is to use PII, plan to adhere to the practices set out in the Duck book about the decoupling of code and data.\nIf data is required for testing or examples, plan to release dummy data.\nConsider the use of precommit hooks [5] to help mitigate the risk of accidentally committing sensitive data to the version history.\n\n\n\n\nIf the codebase works with PII, check that no PII has been committed to any of the version history in scope of publication.\nCheck that the development team have worked consistently with pre-commit by running pre-commit run --all-files in all of the commits in scope of the potential release. If the hooks adjust any of the files in the repository, this is an indication that pre-commit rules have not been adhered to.\n\n\n\n\nUnderstanding the types, severity and likelihood of risks associated with your project may influence a decision about the sorts of interventions required when preparing the codebase for release.\n\n\n3. The Code Repository\nEnsuring that a repository contains all the expected metadata ensures that we help the open source community understand:\n\nwhat the work is about\nwhat is the status of the codebase\nhow the code and / or data can be reused\nwhat the expectations for collaboration are\n\nWhether the project is at planning stage or is already underway, ensure the repository contains the following information:\n\nRequired\n\nRepo structure. Consider appropriate structure. Consider using Campus templates or govcookiecutter [6].\nEnsure the documentation is up-to-date and correct.\nLicenses. General guidance is to use MiT [7] for code and Open Government License [8] for docs and data.\n\n\n\nOptional\n\nContribution guidance (issues/PR templates)\nRepository tagging / labelling, eg in development, archived etc.\nSemantic versioning\nChange log\n\n\n\n\n4. Code Quality\nEnsuring that the code is fit for release inevitably involves reviewing code. Guidance for reviewing code is covered in the section on peer review.\nIt should be noted that the level of peer review should be appropriate to the purposes of releasing the code. Experimental work would understandably require a different level of rigour to a reproducible analytical pipeline involved in producing official statistics.\nPolishing of code that has been archived or decommissioned but released in the public interest may affect the reproducibility of any outputs produced by that codebase. Clearly defining the purposes of the planned publication and the appropriate level of review agreed by project leads and the development team can help to keep the process of peer review as efficient as possible.\n\n\n5. Version History\nDo you intend to publish the full commit history?\n\nPlanningUnderway\n\n\n\nIf the entire version history is to be published, strongly consider an “open from the start” approach, where active development is done in the open. Review with the development team that they are comfortable with the approach and know how to mitigate risk when developing in the open.\nIf not open at the start, be aware that publishing the codebase at intervals may introduce delay to peer review. Build this into your project delivery plan.\n\n\n\n\nIf the entire version history is to be published, A full review of every commit, checking for risks and vulnerabilities, is required. This may be burdensome and is discouraged without a clear benefit.\nPublication of the most recent version may be more feasible. Once achieved, consider whether to continue programming in the open or to pursue a strategy of periodic public release.\n\n\n\n\nProject leads should maintain an awareness of the risks and quality of code present throughout the entire commit history. Coupled with information the amount of resource available and required for review, project leads are able to make decisions about whether to release an entire commit history or the most recent version of the code."
  },
  {
    "objectID": "overview/which-development-strategy.html#conclusion",
    "href": "overview/which-development-strategy.html#conclusion",
    "title": "Which Development Strategy is Right for a Project?",
    "section": "Conclusion",
    "text": "Conclusion\nIn following these steps, the reader can note the risks associated with a project. Based on the current state of the project, the reader has been offered advice on the types of questions to answer and who to involve in answering them.\nIt is intended that this guidance helps the reader arrive at an understanding of which of the strategies is appropriate for their use case and; if appropriate; how to go about preparing the code for release.\nIf you have any queries or suggestions about this article, please click on the “Report an issue” button in the toolbar to the right of this page."
  },
  {
    "objectID": "open-at-the-end/guidance.html",
    "href": "open-at-the-end/guidance.html",
    "title": "Open at the end",
    "section": "",
    "text": "Transitioning from a private to a public repository is slightly more complicated than coding in the open from the beginning. However that shouldn’t stop you from exploring the option, because there are a whole host of benefits to open sourcing your code.\nThis guide will help you decide whether moving from private to public is right for your repository, and help you walk through the required steps to do it.\nA helpful process diagram summarises the approach.\n\n\n\nThe hardest bit is building up the courage to start. The challenge for any code owner is to weigh up the pro’s and con’s of making their repository open. We’ve gone through this process a few times now, so we can take you through the questions we asked ourselves, to help us decide.\n\nWhat is the worst thing that could happen if someone found a big mistake in your code?\nIs that worse than you never finding that mistake and getting something wrong forever?\nWould your users find it helpful if you published links to your code in your publications?\nHow much work is required to get it to a fit state? (see NHS Digital’s fit for publishing checklist [1])\n\nYour repo doesn’t have to be a glowing example of best practice to be made public. For example, if you are working on something experimental and you’re not sure whether you want to invest extra time in adding on all the bells and whistles. Let’s be honest, we rarely have time for perfect. Striving for fully documented code and test coverage, shouldn’t be be a blocker for sharing your good work.\nThat’s not to say you shouldn’t bother with unit tests or documentation at all. Sorry :( .\nThere is a good reason these are considered best practice. Well documented code makes it easier for you and your collaborators to understand what parts of your code are doing, lowering the burden for collaboration.\nUnit tests make it easier for you as a code owner to implement changes and accept contributions from other people. Why? Because if you have good test coverage, you can quickly see if someone else’s cool new feature breaks the rest of your pre-existing code. Without these, there is a larger overhead to accepting contributions, because you will want to run tests yourself manually to check this or risk errors popping up when you really don’t want them.\n\n\n\nSo you’ve decided to go ahead with publishing your code, that’s great!\nIt’s probably a good idea at this point to write down all of the potential things that could go wrong, and how you plan to reduce the likelihood or impact of those things.\nIf you’ve never written one before, not to worry, here is a brief guide to completing a risk assessment.\n\n\n\nIt’s time to implement your mitigations and get those risk scores down. Hopefully it’s just a few small changes or additions you need to make to your code, but equally you might decide at this point that you need some more time to make the changes required to mitigate the risks.\nThere is no rush. So take your time, ask questions, and make sure you get it right.\n\n\n\nWe recommend that someone not connected with the repository reviews the work. Specifically, looking to check to see if they can install and/or run your code from the instructions, and looking out for any sensitive information or vulnerabilities. The external review should be a colleague with the appropriate experience in what risks to look for and should not have been involved in the development work. The external review can happen concurrently with the development team’s review of the codebase or following its conclusion (see previous steps).\nOnce the risks identified by the review have completed, the updated checklist [1] should be provided to the project lead for review. You might need to explain some of the things on there, but the idea is that you are giving others an opportunity to challenge, because risk assessments are subjective and there may be things you haven’t thought of.\n\n\n\nAsk your code reviewer to send you written confirmation of their findings, and forward that along with your risk assessment and summary of what you’ve done to mitigate any risks to the project lead.\nThe project lead will then be able to make a decision as to whether the code is fit for publishing or requires further work in order to meet the necessary standard for release."
  },
  {
    "objectID": "open-at-the-end/guidance.html#a-process",
    "href": "open-at-the-end/guidance.html#a-process",
    "title": "Open at the end",
    "section": "",
    "text": "Transitioning from a private to a public repository is slightly more complicated than coding in the open from the beginning. However that shouldn’t stop you from exploring the option, because there are a whole host of benefits to open sourcing your code.\nThis guide will help you decide whether moving from private to public is right for your repository, and help you walk through the required steps to do it.\nA helpful process diagram summarises the approach.\n\n\n\nThe hardest bit is building up the courage to start. The challenge for any code owner is to weigh up the pro’s and con’s of making their repository open. We’ve gone through this process a few times now, so we can take you through the questions we asked ourselves, to help us decide.\n\nWhat is the worst thing that could happen if someone found a big mistake in your code?\nIs that worse than you never finding that mistake and getting something wrong forever?\nWould your users find it helpful if you published links to your code in your publications?\nHow much work is required to get it to a fit state? (see NHS Digital’s fit for publishing checklist [1])\n\nYour repo doesn’t have to be a glowing example of best practice to be made public. For example, if you are working on something experimental and you’re not sure whether you want to invest extra time in adding on all the bells and whistles. Let’s be honest, we rarely have time for perfect. Striving for fully documented code and test coverage, shouldn’t be be a blocker for sharing your good work.\nThat’s not to say you shouldn’t bother with unit tests or documentation at all. Sorry :( .\nThere is a good reason these are considered best practice. Well documented code makes it easier for you and your collaborators to understand what parts of your code are doing, lowering the burden for collaboration.\nUnit tests make it easier for you as a code owner to implement changes and accept contributions from other people. Why? Because if you have good test coverage, you can quickly see if someone else’s cool new feature breaks the rest of your pre-existing code. Without these, there is a larger overhead to accepting contributions, because you will want to run tests yourself manually to check this or risk errors popping up when you really don’t want them.\n\n\n\nSo you’ve decided to go ahead with publishing your code, that’s great!\nIt’s probably a good idea at this point to write down all of the potential things that could go wrong, and how you plan to reduce the likelihood or impact of those things.\nIf you’ve never written one before, not to worry, here is a brief guide to completing a risk assessment.\n\n\n\nIt’s time to implement your mitigations and get those risk scores down. Hopefully it’s just a few small changes or additions you need to make to your code, but equally you might decide at this point that you need some more time to make the changes required to mitigate the risks.\nThere is no rush. So take your time, ask questions, and make sure you get it right.\n\n\n\nWe recommend that someone not connected with the repository reviews the work. Specifically, looking to check to see if they can install and/or run your code from the instructions, and looking out for any sensitive information or vulnerabilities. The external review should be a colleague with the appropriate experience in what risks to look for and should not have been involved in the development work. The external review can happen concurrently with the development team’s review of the codebase or following its conclusion (see previous steps).\nOnce the risks identified by the review have completed, the updated checklist [1] should be provided to the project lead for review. You might need to explain some of the things on there, but the idea is that you are giving others an opportunity to challenge, because risk assessments are subjective and there may be things you haven’t thought of.\n\n\n\nAsk your code reviewer to send you written confirmation of their findings, and forward that along with your risk assessment and summary of what you’ve done to mitigate any risks to the project lead.\nThe project lead will then be able to make a decision as to whether the code is fit for publishing or requires further work in order to meet the necessary standard for release."
  },
  {
    "objectID": "never-open/index.html",
    "href": "never-open/index.html",
    "title": "Never Open",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nNever Open: A Discussion\n\n\n10 min\n\n\n\nExplanation\n\n\n\nDiscussing closed-source development, it’s appropriate use, misconceptions and risks.\n\n\n\n\n\n\nJul 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNever Open: How to do it Right\n\n\n3 min\n\n\n\nHow-to Guide\n\n\n\nA Guide to Closed Source Development\n\n\n\n\n\n\nJul 3, 2024\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Guidance",
      "Never Open"
    ]
  },
  {
    "objectID": "never-open/explanation.html",
    "href": "never-open/explanation.html",
    "title": "Never Open: A Discussion",
    "section": "",
    "text": "This article discusses the case for closed-source development – when it is appropriate to follow this strategy and when it is not. Potential risks around the default practice of not publishing code are discussed and a question and guidance on planning for potential freedom of information requests are given.\nFor a step by step guide to implementing closed-source development safely, please see Never Open: How to do it Right."
  },
  {
    "objectID": "never-open/explanation.html#introduction",
    "href": "never-open/explanation.html#introduction",
    "title": "Never Open: A Discussion",
    "section": "",
    "text": "This article discusses the case for closed-source development – when it is appropriate to follow this strategy and when it is not. Potential risks around the default practice of not publishing code are discussed and a question and guidance on planning for potential freedom of information requests are given.\nFor a step by step guide to implementing closed-source development safely, please see Never Open: How to do it Right."
  },
  {
    "objectID": "never-open/explanation.html#context-an-increasing-reliance-on-closed-source",
    "href": "never-open/explanation.html#context-an-increasing-reliance-on-closed-source",
    "title": "Never Open: A Discussion",
    "section": "Context: An increasing reliance on closed-source",
    "text": "Context: An increasing reliance on closed-source\nSince its inception, the Data Science Campus has committed to supporting the open-source community and has published code, tools and websites through GitHub in the pursuit of its mission statement.\n\n\n\n\n\n\nData Science Campus Mission Statement\n\n\n\nData Science for the Public Good.\n\n\nIn late 2021, the attention of analysts across the UK public sector had been drawn to various GitHub repositories that were being used to maintain a record of all open source development in the public sector, such as the Unofficial UK Government Mirror. The net result of such activity and greater awareness within government organisations of code hosting solutions has affected the public-sector attitude towards open-source by default.\nAs of the time of writing (7th September 2023), 103 of 596 (17.2%) repositories belonging to the Data Science Campus are public, despite a general acknowledgement that public would be preferable, permissible and would improve transparency and in many projects.\n\n\n\n\n\n\nNote\n\n\n\n“Unnecessary secrecy in government leads to arrogance in governance and defective decision-making.” [1]\n\n\nTo assess whether our code should be published or not, it is important to explicitly identify the reasons that qualify a project for closed-source development and what potential drivers are inappropriate."
  },
  {
    "objectID": "never-open/explanation.html#closed-source-why-is-it-an-option",
    "href": "never-open/explanation.html#closed-source-why-is-it-an-option",
    "title": "Never Open: A Discussion",
    "section": "Closed source: Why is it an option?",
    "text": "Closed source: Why is it an option?\nThe CDDO guidance on when not to publish code [2] states that the grounds for not publishing code are:\n\n\nkeys and credentials\n\nalgorithms used to detect fraud\n\nunreleased policy\n\n\nBest practice on how to handle keys and credentials is covered within the Campus GitHub Training [3] and ONS Duck Book [4]. These should never appear within the version history of any repository - private or public. Discovery of such a problem indicates poor practice. Removal of the credentials and any references to them anywhere within the commit history should be prioritised. Leaving them in the commit history greatly increases the potential discovery of sensitive data.\nFraud detection work tends not to feature as part of our work and is the domain of national audit bodies.\nThe main grounds to consider in the Data Science Campus is where the work would make clear the details of the unreleased policy.\n\n\n\n\n\n\nNote\n\n\n\nThe CDDO guidance [2] in relation to unreleased policy goes on to say:\n\nHowever, you must develop the code as if it’s already open and continue to follow good development and security practices. You must open the code as soon as possible after the policy is announced.\n\n\n\nNote that this restriction may apply to the code, or any other content published on the internet. This includes Pull Requests, Issues or any information published to GitHub for example. If the project you are developing will make unpublished policy clear, then it is advisable to ensure this risk is logged within the project governance and reasons for not publishing the codebase is documented. Internally verify that approach with project leads and through the management chain to ensure that a closed-development approach is agreed.\nIf it is unclear whether the project risks clarifying unpublished policy, this risk should be included within the ethical self-assessment tool [5] and advice from colleagues at the centre for applied data ethics should be sought."
  },
  {
    "objectID": "never-open/explanation.html#the-misconceptions-about-closed-source",
    "href": "never-open/explanation.html#the-misconceptions-about-closed-source",
    "title": "Never Open: A Discussion",
    "section": "The misconceptions about closed source",
    "text": "The misconceptions about closed source\nClosed source is a lower-risk approach to development that often discounts many of the benefits that are introduced by collaboration with the open source community. The potential for the discovery of sensitive data or information is reduced, this goes without saying. But closed-source development is not risk free and projects that engage with sensitive information or data should not always be completely closed source. Let’s unpick that statement in two parts:\n\n1. Closed-source development is not risk free\nSome of the main risks that closed source development may introduce are as follows:\n\nIntroducing poor practice\nRelaxing the controls around quality assurance of code may result in bugs or errors going undiscovered. In order to mitigate this risk, discuss guidance for programming practice set out in the ONS duck book [4] with the development team at the start of a project. Plan to provide assistance and time for peer review of code, ideally at the point of Pull Request. Checks and balances should be proportionate to the risk involved in any project. Not all our work merits an extensive test suite, pre-commit and CI/CD workflows. But that sort of work must also pass the test for open source - the kind of work that we can afford to get wrong. Unpublished work that does not make use of these quality assurance tools avoid the advantages that open source scrutiny and automated behavioural checks offer. One can question, if a codebase does not warrant the effort to test logic is correct and behaviours are stable and expected, then can it warrant closed-source development?\n\n\nFreedom of Information Requests (FoI).\nAll public authorities should be aware that the information they hold is subject to Freedom of Information Act (FOIA) [6]. The purpose of FOIA is to improve transparency and trust in public bodies acting on behalf of the public’s interest by enabling any member of the public to submit a request for information held in a recorded form. Therefore, project code could fall in scope of an FOI request. The default position upon receipt of an FOI is to release the requested information. However, there are a number of exemptions available in Part II of FOIA [7] that allow public authorities to withhold requested information where it is lawful to do so. Exemptions are applied on a case-by-case basis, so we would recommend discussing any requests received with your department’s FOI teams for specific advice on how to respond.\nThe Information Commissioner’s Office (ICO) [8] also provide advice on FOI law and exemptions on their website.\nIt is advisable to prepare for the possibility that an FOI could be received for unpublished code. There is a possibility that the FOI Act would require some or all of the code to be published. This demand would require resource to quality assure the codebase and any version history to be released. This possibility should therefore be considered and planned for when making a decision not to publish. It would also be prudent to document reasons for deciding not to publish, which can then be used when considering whether exemptions may apply. This is important for continuity planning and ensuring compliance with the FOIA’s statutory deadline of 20 working-days.\n\n\n\n2. Not all sensitive projects should completely close source\nProjects that deal with personally identifiable information can mitigate risk and publish code by decoupling the code from the data. Sensitive data should not be committed to a repository. Software packages and reproducible analytical pipelines often release with ‘dummy data’ or test fixtures - small samples of synthetic data. This allows developers to run pipelines or tests to ensure the codebase works as described and is stable across various operating systems as appropriate.\nDeciding not to publish because the data used is sensitive could signal that poor practice has crept into the work. Are hard-coded variables recorded in the code anywhere in the version history? Checking an entire commit history for such issues is much more work than checking the current repo state. It would be worth bearing this in mind."
  },
  {
    "objectID": "never-open/explanation.html#reticence-to-publish",
    "href": "never-open/explanation.html#reticence-to-publish",
    "title": "Never Open: A Discussion",
    "section": "Reticence to Publish",
    "text": "Reticence to Publish\nThe following outlines some of the common reasons analysts may be hesitant to publish code, and some responses to each:\n\n\n\n\n\n\nPotential Driver:\n\n\n\n‘What good would releasing the work do? Much of it is of little relevance to others or are failed experiments.’\n\n\n\n\n\n\n\n\nResponse (Click to Expand)\n\n\n\n\n\nA valid point is made as not everything we start will be carried forward into production. But why keep experiments secret? Are we insecure in sharing failed experiments? Would it be a bad thing for others to succeed based on a failed experiment of ours? Wouldn’t such a hypothetical situation present a valuable learning opportunity to the public sector and open source community? Making a public archive of such a repository would be a better scenario, indicating to any potential users that the code is not maintained.\n\n\n\n\n\n\n\n\n\nPotential Driver:\n\n\n\n‘I’m worried about exposing my work, it may not be polished code.’\n\n\n\n\n\n\n\n\nResponse (Click to Expand)\n\n\n\n\n\nThis type of statement hints at a broader sensitivity to open development, which could be partially influenced by an organisational culture of publication after development. We aim to publish code that works, is secure and is maintainable. It need not necessarily be consistent, efficient or clever. Some polishing of code should happen at the peer review stage, and ensuring that merging to the main branch is mediated by peer review helps to mitigate risk of degrading code standards. It is important to state that not all projects have been able to resource regular and timely code review. This is a risk that should be clearly stated in the project governance and escalated through the project lead.\nWork in progress within feature branches is typically treated with a different standard until it has been prepared for a Pull Request. Mitigating risk of dangerous activity within any branch is largely achieved through our corporate adoption of pre-commit. Please consult the Data Science Campus GitHub Training for more details on how to use pre-commit.\nWork in progress can be clearly communicated within the readme by a statement and / or a repository shield. Shields.io is a service that can be used to generate links to customisable badges for use within sites.\n\n\n\n\n\n\n\n\n\nPotential Driver:\n\n\n\n“I’m uncertain that I’ve done everything right, I’d rather publish after it’s finished.”\n\n\n\n\n\n\n\n\nResponse (Click to Expand)\n\n\n\n\n\nGenerally the project lead should revisit the GitHub training [3] and advice in this site with their team and prepare to publish their work. Open sourcing your code helps improve its quality.\nBringing the work under the scrutiny of the open source community helps to increase the transparency in our work and build trust with the public. A general unease with releasing code potentially introduces risk, see The misconceptions about closed source.\n\n\n\n\n\n\n\n\n\nPotential Driver:\n\n\n\n“My project is urgent. I don’t have time or resource for the peer review required to do this in the ideal way.”\n\n\n\n\n\n\n\n\nResponse (Click to Expand)\n\n\n\n\n\nNot having time for peer review is not an argument against open sourcing code. The recommended approach is to require approval of Pull Requests but we do not always operate in ideal conditions. Explore strategies for peer review that meet the need for quality assurance in your project. This could take the form of a thorough code review at key milestones.\nIt is not recommended to develop in isolation. If this situation arises it would be pertinent to log this as a risk and escalate through the project lead. Even if the developer is an expert, the risk in maintaining this code if only one person within the organisation understands it is too high to recommend."
  },
  {
    "objectID": "never-open/explanation.html#conclusion",
    "href": "never-open/explanation.html#conclusion",
    "title": "Never Open: A Discussion",
    "section": "Conclusion",
    "text": "Conclusion\nIn this article, the use case of closed-source has been introduced. Misconceptions about closed source development and risk avoidance have been asserted. Key risks about code quality and the potential for FoI requests have been discussed at length. This article intended to help the reader gain an appreciation of the situation where closed-source is more appropriate than others. If you have any queries or suggestions about this article, please click on the “Report an issue” button in the toolbar to the right of this page."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Coding in the Open v1.0.0",
    "section": "",
    "text": "The following pages provide guidance on ‘coding in the open’ - developing open-source codebases or transitioning codebases from private to public domains. This guidance is based upon NHS Digital guidance [1]. Click here to download NHS Digital’s fit for publishing checklist.\nThe term open-source captures work that is made freely available for others to use and modify [2].\nThe benefits to open-source codebases are greater accountability, collaboration, and trust.\nThis guide does not replace any of the guidance in the UK Government’s Aqua Book [3], but instead supplements with considerations related specifically to publishing analytical code on GitHub.\nThis guide supports, not replaces, the need for good project governance.",
    "crumbs": [
      "Coding in the Open v1.0.0"
    ]
  },
  {
    "objectID": "index.html#guidance-overview",
    "href": "index.html#guidance-overview",
    "title": "Coding in the Open v1.0.0",
    "section": "Guidance Overview",
    "text": "Guidance Overview\n\n\n\nTable 1: Summary of guidance pages.\n\n\n\n\n\n\n\n\n\nPage\nDescription\n\n\n\n\nOverview\nA ‘coding in the open’ overview and general guidance on open source development.\n\n\nOpen at the start\nGuidance on considerations when developing in the open.\n\n\nOpen at the end\nGuidance on moving work from a private domain into the public. This includes a checklist and flowchart to provide additional support when applying the guidance.\n\n\nNever open\nReasons why code may not be published and how to document this.\n\n\nFurther information\nExpectations for peer review.\n\n\n\n\n\n\nThese pages are accessible in the sidebar.\nAll sources are referenced throughout (you can hover over them for more details). Additionally, they are available at the bottom of each page and in a dedicated references page for convenience.",
    "crumbs": [
      "Coding in the Open v1.0.0"
    ]
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Coding in the Open v1.0.0",
    "section": "References",
    "text": "References\n\n\n[1] NHS Digital, “How to publish your code in the open.” https://nhsdigital.github.io/rap-community-of-practice/implementing_RAP/how-to-publish-your-code-in-the-open/\n\n\n[2] Open Source Initiative, “The open source definition.” https://opensource.org/osd/\n\n\n[3] HM Treasury, “The aqua book.” https://www.gov.uk/government/publications/the-aqua-book-guidance-on-producing-quality-analysis-for-government",
    "crumbs": [
      "Coding in the Open v1.0.0"
    ]
  },
  {
    "objectID": "further-information/index.html",
    "href": "further-information/index.html",
    "title": "Further Information",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nPeer Review.\n\n\n1 min\n\n\nGuidance for reviewing code for release and troubleshooting problems.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Guidance",
      "Further Information"
    ]
  },
  {
    "objectID": "open-at-the-start/guidance.html",
    "href": "open-at-the-start/guidance.html",
    "title": "Open at the start",
    "section": "",
    "text": "The preferable approach to open source development should be open from the start [1]. Considering the ICO Guidance on Freedom of Information requests [2] (FoI), developing analytical code in private is not without risk. Consider that you may need to turnaround an FoI within 20 working days, such a request could introduce significant demand upon a team in anonymising and quality assuring a project. Wherever possible, taking steps to be able to work within the scrutiny of the open source community is preferable.\nA key consideration in releasing code at the end is whether or not to release with the entire commit history. Releasing at intervals with an entire commit history vastly increases the number of lines of code to review before release. Taking the time to adequately assess the risks associated with a project and to develop accordingly is a decision that should not default to private in all cases.\nThis guidance is intended to help developers at the Data Science Campus when setting up a public repository on our Campus Team GitHub. It will discuss some suggested practice in setting up a project board, though this guidance should not document the current state of the GitHub user interface, as this changes frequently.\n\n\n\nWork with the Campus delivery team to ensure appropriate project governance is set up. This should include (but not limited to):\n\nCompleting an ethical self-assessment [3].\nGain agreement in writing with project lead to code in the open.\nConsider the needs of the development team.\n\nDoes everyone understand the risks with the project and how to mitigate them?\nCould some dedicated pair-programming help to standardise the development approach?\nCould revisiting the Campus GitHub training [4] & SyOps help?\nConsider a Risks log, setting out the sensitive aspects of a project, ensure the dev team have access to this document and that it is maintained.\nThis can also help to ensure everyone is up and running with key mitigations such as pre-commit [5] and that style conventions are adhered to.\n\n\n\n\n\n\nChoose a repository template that suits the complexity of the project. There are multiple to choose from, but the Campus’ minimal repository template [6] may be useful. For more involved projects, you may wish to consider GovCookieCutter [7] .\nConfigure branch protection [8] under your repository settings.\nEnsure a license file is included. MiT is adequate for most purposes.\nDocumentation or other Intellectual Property beyond code is distributed under OGL 3.0 [9]\nIt’s a good idea to provide issue or pull request (PR) templates and a contributing guide to help nudge collaborators (internal or external) towards the habits you expect.\nInclude a code of conduct to help safeguard from poor online behaviour.\nInclude contribution guidance so that team members and external collaborators understand the working conventions of your repository.\n\n\n\n\n\nIn an open repo, any GitHub member could fork the codebase and raise a PR.\nColleagues should consider that they are representing the ONS [10] in all their interactions on our corporate GitHub teams account. Refer to the GitHub SyOps for more information.\nIn cases of collaboration with external agencies, consider whether access to the public repository is enough, or whether access to a private project board needs approval with Campus Delivery Team.\n\n\n\n\nConsidering the sensitivity of the work undertaken, a decision may be made on whether a public or private project board (kanban) [11] is needed. A public code repository can be linked to a private project board. To facilitate this way of working, please consider:\n\nIssues on the public repo are visible to all GitHub users. Adding them to a private project does not change the visibility of the project board or its content.\nPrivate project boards allow the creation of draft tickets (sometimes referred to as notes). Converting a note to an issue on a public repo will change its visibility.\nFor more information on the visibility of a project, please see the GitHub documentation [12] ."
  },
  {
    "objectID": "open-at-the-start/guidance.html#guidance-for-coding-in-the-open",
    "href": "open-at-the-start/guidance.html#guidance-for-coding-in-the-open",
    "title": "Open at the start",
    "section": "",
    "text": "The preferable approach to open source development should be open from the start [1]. Considering the ICO Guidance on Freedom of Information requests [2] (FoI), developing analytical code in private is not without risk. Consider that you may need to turnaround an FoI within 20 working days, such a request could introduce significant demand upon a team in anonymising and quality assuring a project. Wherever possible, taking steps to be able to work within the scrutiny of the open source community is preferable.\nA key consideration in releasing code at the end is whether or not to release with the entire commit history. Releasing at intervals with an entire commit history vastly increases the number of lines of code to review before release. Taking the time to adequately assess the risks associated with a project and to develop accordingly is a decision that should not default to private in all cases.\nThis guidance is intended to help developers at the Data Science Campus when setting up a public repository on our Campus Team GitHub. It will discuss some suggested practice in setting up a project board, though this guidance should not document the current state of the GitHub user interface, as this changes frequently.\n\n\n\nWork with the Campus delivery team to ensure appropriate project governance is set up. This should include (but not limited to):\n\nCompleting an ethical self-assessment [3].\nGain agreement in writing with project lead to code in the open.\nConsider the needs of the development team.\n\nDoes everyone understand the risks with the project and how to mitigate them?\nCould some dedicated pair-programming help to standardise the development approach?\nCould revisiting the Campus GitHub training [4] & SyOps help?\nConsider a Risks log, setting out the sensitive aspects of a project, ensure the dev team have access to this document and that it is maintained.\nThis can also help to ensure everyone is up and running with key mitigations such as pre-commit [5] and that style conventions are adhered to.\n\n\n\n\n\n\nChoose a repository template that suits the complexity of the project. There are multiple to choose from, but the Campus’ minimal repository template [6] may be useful. For more involved projects, you may wish to consider GovCookieCutter [7] .\nConfigure branch protection [8] under your repository settings.\nEnsure a license file is included. MiT is adequate for most purposes.\nDocumentation or other Intellectual Property beyond code is distributed under OGL 3.0 [9]\nIt’s a good idea to provide issue or pull request (PR) templates and a contributing guide to help nudge collaborators (internal or external) towards the habits you expect.\nInclude a code of conduct to help safeguard from poor online behaviour.\nInclude contribution guidance so that team members and external collaborators understand the working conventions of your repository.\n\n\n\n\n\nIn an open repo, any GitHub member could fork the codebase and raise a PR.\nColleagues should consider that they are representing the ONS [10] in all their interactions on our corporate GitHub teams account. Refer to the GitHub SyOps for more information.\nIn cases of collaboration with external agencies, consider whether access to the public repository is enough, or whether access to a private project board needs approval with Campus Delivery Team.\n\n\n\n\nConsidering the sensitivity of the work undertaken, a decision may be made on whether a public or private project board (kanban) [11] is needed. A public code repository can be linked to a private project board. To facilitate this way of working, please consider:\n\nIssues on the public repo are visible to all GitHub users. Adding them to a private project does not change the visibility of the project board or its content.\nPrivate project boards allow the creation of draft tickets (sometimes referred to as notes). Converting a note to an issue on a public repo will change its visibility.\nFor more information on the visibility of a project, please see the GitHub documentation [12] ."
  },
  {
    "objectID": "open-at-the-start/index.html",
    "href": "open-at-the-start/index.html",
    "title": "Open at the Start",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nOpen at the start\n\n\n4 min\n\n\nAre you intending to develop in the open? A guide to starting out with an open source project.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Guidance",
      "Open at the Start"
    ]
  },
  {
    "objectID": "further-information/peer-review.html",
    "href": "further-information/peer-review.html",
    "title": "Peer Review.",
    "section": "",
    "text": "This page sets out general guidance for standards of review. It intends to help raise awareness in issues that could be encountered while preparing to release code.\nWhen reviewing code, it is recommended that you consult pre-existing sources of peer review guidance. The ONS duck book provides low, moderate and high quality peer review checklists [1]. The NHS fit for publishing checklist [2] is also a useful tool for peer review.\nAt the time of writing, the following sources were compared with review considerations collated from Campus colleagues. The following checks were not explicitly covered in the Duckbook or NHS checklists and are presented here for completeness.\n\n\n\n\n\n\nComplementary checks\n\n\n\n\n\nWarning: Not a complete checklist. Please consult the sources above to ensure code is of an appropriate quality prior to publication.\n\nCheck for broken links in the documentation.\nActively try to break the code by considering edge cases. Are the important exceptions raised correctly?\nIs the API intuitive and consistent? Do modules follow the same naming conventions etc?\nCreate a new environment and rebuild the package. A useful way to detect breaking changes in dependencies.\nOn pull request, note any merge conflicts between the feature and target branch.\n\n\n\n\n\n\n\n\nReferences\n\n[1] Office for National Statistics, “Duck book peer review checklists.” https://best-practice-and-impact.github.io/qa-of-code-guidance/checklists.html\n\n\n[2] NHS Digital, “NHS fit for publishing checklist word document.” https://nhsdigital.github.io/rap-community-of-practice/images/Fit_for_publishing_checklist.docx"
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "Contributions",
    "section": "",
    "text": "It’s important that the content of each section is in the correct place. The aim of the current structure is to provide lighweight documentation and to place detailed guidance in dedicated subpages. Please review your contibution against the purposes of each page:\n\nindex.qmd: Help the user navigate the website structure.\ngeneral-considerations/guidance.qmd : Things that apply to any approach to code publication (open at start, end or never open). Things to think about prior to making this decision.\noverview/references.qmd : Please do not add references here. Instead, add references to bibliography/references.bib and reference using the @ notation.\nopen-at-the-start/guidance.qmd : Considerations for projects that will develop in the open.\nopen-at-the-end/guidance.qmd : Considerations for projects that will publish at close or at intervals. This may be with a full or partial commit history.\nnever-open/guidance.qmd : Things to consider if a project is too sensitive to consider publishing.\nwhat-could-go-wrong/checklist.qmd : A page to help us learn from each other. Things that may not have been caught by the ’fit for publishing’checklist or are more specific to certain kinds of projects (eg webscraping activities).\n\n\n\n\nPlease help us meet Government Digital Standard by:\n[ ] render your documentation and check with the WAVE accessibility browser plugin. [ ] avoiding the use of italic or strikethrough text. [ ] ensuring all images have descriptive alt text. [ ] only using image tags as markdown syntax renderring cannot be relied upon to present alt text as required by WCAG guidance. Avoid using markdown to render images. [ ] avoid skipping headers for visual purposes. Header orders should be incremental, such as h1,h2,h3,h2,h2,h2,h3,h4,h4 etc. Headers can be restyled using CSS where required."
  },
  {
    "objectID": "CONTRIBUTING.html#a-guide-to-contributing-to-the-process-guidance",
    "href": "CONTRIBUTING.html#a-guide-to-contributing-to-the-process-guidance",
    "title": "Contributions",
    "section": "",
    "text": "It’s important that the content of each section is in the correct place. The aim of the current structure is to provide lighweight documentation and to place detailed guidance in dedicated subpages. Please review your contibution against the purposes of each page:\n\nindex.qmd: Help the user navigate the website structure.\ngeneral-considerations/guidance.qmd : Things that apply to any approach to code publication (open at start, end or never open). Things to think about prior to making this decision.\noverview/references.qmd : Please do not add references here. Instead, add references to bibliography/references.bib and reference using the @ notation.\nopen-at-the-start/guidance.qmd : Considerations for projects that will develop in the open.\nopen-at-the-end/guidance.qmd : Considerations for projects that will publish at close or at intervals. This may be with a full or partial commit history.\nnever-open/guidance.qmd : Things to consider if a project is too sensitive to consider publishing.\nwhat-could-go-wrong/checklist.qmd : A page to help us learn from each other. Things that may not have been caught by the ’fit for publishing’checklist or are more specific to certain kinds of projects (eg webscraping activities).\n\n\n\n\nPlease help us meet Government Digital Standard by:\n[ ] render your documentation and check with the WAVE accessibility browser plugin. [ ] avoiding the use of italic or strikethrough text. [ ] ensuring all images have descriptive alt text. [ ] only using image tags as markdown syntax renderring cannot be relied upon to present alt text as required by WCAG guidance. Avoid using markdown to render images. [ ] avoid skipping headers for visual purposes. Header orders should be incremental, such as h1,h2,h3,h2,h2,h2,h3,h4,h4 etc. Headers can be restyled using CSS where required."
  },
  {
    "objectID": "never-open/how-to.html",
    "href": "never-open/how-to.html",
    "title": "Never Open: How to do it Right",
    "section": "",
    "text": "This guide presents a series of reference steps to help developers in assessing a codebase for closed source development suitability. It also walks through best-practice considerations for closed-source development.\nThis guide does not explain the purpose of the actions set out below. In line with the Diátaxis system, this can be found in A Discussion of Closed Source Development."
  },
  {
    "objectID": "never-open/how-to.html#introduction",
    "href": "never-open/how-to.html#introduction",
    "title": "Never Open: How to do it Right",
    "section": "",
    "text": "This guide presents a series of reference steps to help developers in assessing a codebase for closed source development suitability. It also walks through best-practice considerations for closed-source development.\nThis guide does not explain the purpose of the actions set out below. In line with the Diátaxis system, this can be found in A Discussion of Closed Source Development."
  },
  {
    "objectID": "never-open/how-to.html#project-governance",
    "href": "never-open/how-to.html#project-governance",
    "title": "Never Open: How to do it Right",
    "section": "Project Governance",
    "text": "Project Governance\n\nIf you are uncertain if the code can be published due to the nature of the work, consider the following sources of advice:\n\nDoes the code meet any of the Central Digital & Data Office’s descriptions of appropriate projects for closed-source code [1]? Namely, does the code publish counter fraud algorithms? Or does the code make unpublished policy apparent?\nHave the outcomes of the ethical review [2] indicated closed source measures as a required mitigation?\nHas the expectation and reasons for closed-source been clearly established with Campus leadership?\n\nIf the sensitivity of the project is due to the personally identifiable data, ensure that the code and data are decoupled and plan to publish the codebase with synthetic data.\nIf the outcome of these questions is to pursue an open source strategy, consult the guide’s sections on open at the start or open at the end as appropriate."
  },
  {
    "objectID": "never-open/how-to.html#closed-development",
    "href": "never-open/how-to.html#closed-development",
    "title": "Never Open: How to do it Right",
    "section": "Closed Development",
    "text": "Closed Development\nIf a ‘never open’ approach has been determined, follow this guidance to mitigate risk associated with potential freedom of information requests [3].\n\nRecord the reasons for not publishing the code within the project governance documentation. Ensure that this documentation is reasoned and explicit - enough for someone to be able to represent this decision accurately in your absence. Ensure that the project governance is stored somewhere colleagues can access and that your project delivery colleagues are aware of this location.\nDevelop as if the repository were open. Ensure that poor practice is not introduced to the code base. Consult the guidance provided in the open-at-the-start section.\n\nAgree a set of mitigation behaviours with the development team in writing. Keep a record in order to bring new developers up to speed efficiently.\n\nEnsure that the analytical code is completely decoupled from the data. Check that no data (apart from dummy or test fixtures) are committed to the repository at any point in the version history.\n\nCheck that filepaths do not expose valuable intel about sensitive infrastructure. Filepaths to Google Cloud Platform buckets for example, should be stored in a file covered by the .gitignore and not committed to version history. Similarly, SharePoint links should not be committed to repositories.\n\nEnsure that the precommit hooks are installed and used for all developers. Particularly detect-secrets[4] and nbstripout[5].\n\nCheck the repository for the presence of known secrets or keys with git grep. From the command line, navigate to the repository and use the command git grep &lt;INSERT_THE_CREDENTIAL&gt; to ensure it is not referenced in any of the repository file contents. For more on searching git repositories, consult the Git Tools - Searching documentation [6].\n\nEnsure that conversations about the context of the work occur within dedicated, private GitHub projects (sometimes referred to as kanbans). Check that repository issues do not expose sensitive intelligence that may expose unpublished policy."
  },
  {
    "objectID": "never-open/how-to.html#conclusion",
    "href": "never-open/how-to.html#conclusion",
    "title": "Never Open: How to do it Right",
    "section": "Conclusion",
    "text": "Conclusion\nYou have been presented with guidance for understanding whether your project is suitable for a ‘closed development’ approach. You have also followed along with steps on and how to go about ensuring that closed development does not introduce poor safety practice into the codebase. If you have further suggestions for this guide, please click on the “Report an issue” button in the table of contents to the right of this page."
  },
  {
    "objectID": "open-at-the-end/risk-assessment-guide.html",
    "href": "open-at-the-end/risk-assessment-guide.html",
    "title": "Brief Risk Assessment Guide.",
    "section": "",
    "text": "An appropriate table format for a risk log:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRisk\nConsequences\nImpact\nLikelihood\nExposure\nRisk\nMitigations\nImpact\nLikelihood\nExposure\nRisk\n\n\n\n\nDescription of risk\nWhat could go wrong\nImpact score\nLikelihood Score\nLikelihood x Impact\nRisk assessment (high/medium/low)\nA list of things you could do to reduce the risk\nRevised impact score\nRevised likelihood score\nRevised exposure\nRevised risk\n\n\n\nAlong with this risk exposure diagram to help you assess the impact, likelihood and exposure scores:\n\n\n\nRisk Exposure Matrix\n\n\nImportant things to consider in your risk assessment - follow the reference link to a helpful NHS checklist template [1]:\n\nHow will you ensure no passwords, data or other sensitive information is shared by making your repo public?\nHow will you safeguard against people accidentally pushing this information in the future after the repo is made public?\nHow will you manage users expectations of quality and on-going maintenance?\nHow will you use licencing to protect any proprietary rights and set limitations on liability from others using your code?"
  },
  {
    "objectID": "open-at-the-end/index.html",
    "href": "open-at-the-end/index.html",
    "title": "Open at the End",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nPrivate to Public Publication Process Overview\n\n\n1 min\n\n\n\nprocess\n\n\n\nA process chart for code publication, establishing roles and a procedure for review.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpen at the end\n\n\n4 min\n\n\nDo you intend to release your code? This guidance aims to help you understand the requirements for publication.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBrief Risk Assessment Guide.\n\n\n2 min\n\n\n\nproject governance\n\n\n\nA suggested format for risk assessing data science projects.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Guidance",
      "Open at the End"
    ]
  },
  {
    "objectID": "overview/overview.html",
    "href": "overview/overview.html",
    "title": "Overview",
    "section": "",
    "text": "This guidance was developed to support open-source code development within the ONS Data Science Campus.\n\n\nTable 1. How to use this guide.\n\n\n\nUser\n\n\nHow to use this guide\n\n\n\n\nData Scientists (all levels)\n\n\nGuidance on how to contribute to open source codebases, with a view to them being or becoming open-source.\n\n\n\n\nTechnical Leads\n\n\n\n\nHow to incoporate plans for making your codebase open to the public, either at outset (open at the start) or at a point in time (open at the end).\n\n\nGuidance to support other members on the team\n\n\n\n\n\n\nProject Leads or Lead Data Scientists\n\n\nProtocols for making codebases open-source\n\n\n\nIt could also be used by anyone who has an interest in developing open-source code or would like to transition a codebase from a private/closed domain into the open."
  },
  {
    "objectID": "overview/overview.html#sec-who-for",
    "href": "overview/overview.html#sec-who-for",
    "title": "Overview",
    "section": "",
    "text": "This guidance was developed to support open-source code development within the ONS Data Science Campus.\n\n\nTable 1. How to use this guide.\n\n\n\nUser\n\n\nHow to use this guide\n\n\n\n\nData Scientists (all levels)\n\n\nGuidance on how to contribute to open source codebases, with a view to them being or becoming open-source.\n\n\n\n\nTechnical Leads\n\n\n\n\nHow to incoporate plans for making your codebase open to the public, either at outset (open at the start) or at a point in time (open at the end).\n\n\nGuidance to support other members on the team\n\n\n\n\n\n\nProject Leads or Lead Data Scientists\n\n\nProtocols for making codebases open-source\n\n\n\nIt could also be used by anyone who has an interest in developing open-source code or would like to transition a codebase from a private/closed domain into the open."
  },
  {
    "objectID": "overview/overview.html#sec-intentions",
    "href": "overview/overview.html#sec-intentions",
    "title": "Overview",
    "section": "What are the Guidance Intentions?",
    "text": "What are the Guidance Intentions?\nThe goals of this guidance are to support development strategies for projects that can be:\n\n\n\nOpen at the start. This implies that from the beginning all code/software developed would be available for anyone to view and use.\nOpen at the end. Encourages and supports, where possible, closed/private codebases to transition into the public domain.\nNever open. Recognises there maybe scenarios where valid arguments prevent publishing a codebase in the open, but developing privately is the exception rather than the rule.\n\n\n\nThis guidance aims to achieve these goals by:\n\n\n\nProviding a set of considerations when developing an open-source codebase or moving a codebase from a private into a public repository.\nNot being a prescriptive “one size fits all” process, but adaptable guidance that can be modified as required based on the size, complexity and purpose of the work.\nAdding quality to public codebases and to help mitigate potential risks when working in or moving into the public domain.\nImproving transparency of decision making, as to why codebases are open/closed.\nClosing a current resource gap, where at the time of writing no internal guidance exists."
  },
  {
    "objectID": "overview/overview.html#sec-why-open",
    "href": "overview/overview.html#sec-why-open",
    "title": "Overview",
    "section": "Why Develop in the Open?",
    "text": "Why Develop in the Open?\nThe Office for National Statistics (ONS) quality assurance of code [1], the Government Analysis Function [2], and the UK Government’s Technology Code of Practice [3] all call for code to be open-source. This is, at least in part, due to the wide range of benefits that developing in the open brings. In particular, these benefits help support an outputs’ compliance with the UKSA Code of practice for Statistics [4] - where public value, high quality, and trustworthiness are the main pillars.\nThere are many sources which explain these benefits in detail [1]–[3], [5]–[9], and they all argue strongly as to why this guidance advocates for open source development. The themed boxes below summarise the benefits of open-source software and coding in the open:\n\n\n\nIncreases Quality\nThere is a heightened inclination to apply coding standards and best practice when knowing the work will be viewed and used by a larger audience.\n\n\n\n\nIncreases Collaboration\nSimplifies the process of sharing work, which in turn improves knowledge-sharing and provides an opportunity for additional development support. Our work will benefit from collaboration with other government departments, academic institutions & the wider open-source community.\n\n\n\n\n\n\nIncreases Transparency\nPotential users and interested parties can see, understand, and reproduce work. This helps build trust in the work being undertaken and shared.\n\n\n\n\nSupports Whole Community\nOthers can benefit from work already developed by facilitating code re-use.\n\n\n\n\n\n\nPublic Investment\n“Public services are built with public money”, which provides good ground to make code publically available unless there is a good reason not to publish the codebase. In not releasing code where appropriate to do so, you may be unintentionally tolerating the risk of needing to turn around potenital freedom of information requests within the 20 working day time period. [10]"
  },
  {
    "objectID": "overview/overview.html#why-develop-privately",
    "href": "overview/overview.html#why-develop-privately",
    "title": "Overview",
    "section": "Why Develop Privately?",
    "text": "Why Develop Privately?\nOpen-source development does bring with it some additional considerations and risks [2]. As a result, there are scenarios in which opening all or parts of a codebase may not be possible [11]. The themed boxes below summarise reasons why all or part of a codebase may not be publicly available:\n\n\n\nSensitivity\nThe codebase may relate to or share sensitive information e.g., a policy that has not yet been announced, or data that has not yet been released.\n\n\n\n\nStatistical Disclosure\nThe codebase may, inadvertently or otherwise, share identifiable information about individuals or organisations.\n\n\n\n\n\n\nKeys and Credentials\nThe codebase may contain keys and/or credentials that need to be secured e.g., keys/credentials to utilise an API.\n\n\n\n\nSkills and Expertise\nThe skill-set, experience and/or confidence to work openly and manage the associated risks may not be present across all team members.\n\n\n\n\n\n\nLicence Agreements\nThe codebase may use proprietary (closed-source) software or could be considered proprietary itself. In these cases, opening the codebase could breach licence terms and/or user agreement. It could also lead to end users being dependent on the use of (potentially expensive) proprietary software, ultimately meaning the released codebase is not accessible to everyone."
  },
  {
    "objectID": "overview/overview.html#sec-open-v-closed",
    "href": "overview/overview.html#sec-open-v-closed",
    "title": "Overview",
    "section": "Coding Openly (the premise) or Privately (the exception)?",
    "text": "Coding Openly (the premise) or Privately (the exception)?\nOpen-sourcing a codebase is a case-by-case balance between its purpose, public value, risk management and technical constraints [2]. As outlined in the sections above, code should be made open to maximise the benefits for the codebase itself and the wider community unless an explicit justification exists to prevent it being open.\nThe premise therefore should be one where the codebase is open by default - that is, all code/software developed would be available for anyone to view and use from the beginning. This stance brings the benefits of open-source development upfront and minimises any additional workload that would come from transitioning the codebase from private to public at a later date.\nIf it is not possible to be open by default, consider other strategies for making the codebase open. These approaches could bring additional design complexity and/or workload when compared with being open by default, but ultimately the codebase would still benefit from the same open-source advantages. This could be:\n\n\n\nDesigning or re-designing the codebase to use open-source dependencies.\nSeparating out or removing sections that should not be made public.\nConsistently using good coding practices [1], to simplify the process of opening the codebase in the future should it be possible.\nTransitioning a private codebase to public at a later date (see specific guidance on this topic).\nMaintain private and public versions of a codebase - development could then continue in a private domain and then be released publicly as needed.\nReleasing code with synthetic or dummy data, such as that used when testing your codebase.\n\n\n\nFinally, if it is not possible for the codebase to be made public, an evidence-based justification should be made as to why this is the case. It is envisaged that this case would be the exception rather than the rule."
  },
  {
    "objectID": "overview/index.html",
    "href": "overview/index.html",
    "title": "Overview",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nOverview\n\n\n7 min\n\n\nUnderstanding the aims and audience for this guidance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich Development Strategy is Right for a Project?\n\n\n7 min\n\n\n\nHow-To\n\n\n\nA workflow for assessing a project for open sourcing.\n\n\n\n\n\n\nNov 8, 2023\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Guidance",
      "Overview"
    ]
  }
]