---
title: "General Considerations"
---

Points to consider (not necessarily in this order):

- Do you intend to publish with/without the commit history? Potentially a much larger job to undertake with a full commit history. If sharing the full commit history is justified, it may be more appropriate to consider an "open from the start" approach where active development is done in the open. Otherwise, a full readthrough of every commit diff checking for risks and vulnerabilities in the code is required.
- Repository tagging/labelling
- Key and Credential Management
- Publishing with intention for further development and/or on-going maintenance:
    - contribution guidance (issues/PR templates)
    - semantic versioning
    - change log
- Following coding good practices:
    - recommend ONS code quality assurance @DuckBook as it will cover styles, functional code, unit testing, version control, minimising disclosure risks: repo structure (but still point to our own), pre-commit, gitignore.
- Repo structure. Consider appropriate structure. Select from campus templates or govcookiecutter @GovCookieCutter or similar.
- Documentation (readmes, and more?)
- Licenses. General guidance is to use MiT for code and OGL for docs and data (as appropriate).
- Use open source tools/software/data
- Dummy data. If you cannot release the data required to run your code, can you release summy data to help users execute scripts? This data may be released as test fixtures.
- Notebooks or not to notebooks... (what about gists? maybe part of documentation)
- Skill-sets/training - are your team operating with an acceptable understanding of what the risks associated with your work are? Steps to help the development team share in best practice should be considered, such as:
    - Ensuring the Data Science Campus (DSC) GitHub SyOps has been completed for all members.
    - The DSC GitHub training @DSCGitHubTraining has been completed and refreshed as needed.
    - pair programming to support junior developers.
